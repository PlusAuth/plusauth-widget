=make-container($padding-x: $container-padding-x)
  width: 100%
  padding: $padding-x
  margin-right: auto
  margin-left: auto

// For each breakpoint, define the maximum width of the container in a media query
=make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints)
  @each $breakpoint, $container-max-width in $max-widths
    +media-breakpoint-up($breakpoint, $breakpoints)
      max-width: $container-max-width

=make-row($gutter: $grid-gutter)
  display: flex
  flex-wrap: wrap
  flex: 1 1 auto
  margin-right: -$gutter / 2
  margin-left: -$gutter / 2

=make-col-ready($gutter: $grid-gutter)
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%
  padding: $gutter / 2

=make-col($size, $columns: $grid-columns)
  flex: 0 0 percentage($size / $columns)
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns)

=make-col-offset($size, $columns: $grid-columns)
  $num: $size / $columns
  margin-left: if($num == 0, 0, percentage($num))

=make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter, $breakpoints: $grid-breakpoints)
  // Common properties for all breakpoints
  %grid-column
    width: 100%
    padding: $gutter / 2
  @each $breakpoint in map-keys($breakpoints)
    $infix: breakpoint-infix($breakpoint, $breakpoints)
    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns
      .col#{$infix}-#{$i}
        @extend %grid-column
    .col#{$infix},
    .col#{$infix}-auto
      @extend %grid-column
    +media-breakpoint-up($breakpoint, $breakpoints)
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix}
        flex-basis: 0
        flex-grow: 1
        max-width: 100%
      .col#{$infix}-auto
        flex: 0 0 auto
        width: auto
        max-width: 100% // Reset earlier grid tiers
      @for $i from 1 through $columns
        .col#{$infix}-#{$i}
          +make-col($i, $columns)
      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through $columns - 1
        @if not ($infix == "" and $i == 0)
          // Avoid emitting useless .offset-0
          .offset#{$infix}-#{$i}
            +make-col-offset($i, $columns)


.container
  +make-container
  +make-container-max-widths

  &--fluid
    max-width: 100%

// Row
//
// Rows contain and clear the floats of your columns.
.row
  +make-row

  &--dense
    margin-right: -$form-grid-gutter / 2
    margin-left: -$form-grid-gutter / 2

    > .col,
    > [class*="col-"]
      padding: $form-grid-gutter / 2

// Remove the negative margin from default .row, then the horizontal padding
// from all immediate children columns (to prevent runaway style inheritance).
.no-gutters
  margin-right: 0
  margin-left: 0
  > .col,
  > [class*="col-"]
    padding: 0

// Columns
//
// Common styles for small and large grid columns
+make-grid-columns


.container
  &.grow-shrink-0
    flex-grow: 0
    flex-shrink: 0

  &.fill-height
    align-items: center
    display: flex

    > .layout
      height: 100%
      flex: 1 1 auto

      &.grow-shrink-0
        flex-grow: 0
        flex-shrink: 0

  &.grid-list
    @each $size, $gutter in $grid-gutters
      &-#{$size}
        .layout
          .flex
            padding: $gutter / 2

        .layout:only-child
          margin: -$gutter / 2

        .layout:not(:only-child)
          margin: auto (-$gutter / 2)

        *:not(:only-child)
          .layout:first-child
            margin-top: -$gutter / 2

          .layout:last-child
            margin-bottom: -$gutter / 2

.layout
  display: flex
  flex: 1 1 auto
  flex-wrap: nowrap
  min-width: 0

  &.reverse
    flex-direction: row-reverse

  &.column
    flex-direction: column

    &.reverse
      flex-direction: column-reverse

    > .flex
      max-width: 100%

  &.wrap
    flex-wrap: wrap

  &.grow-shrink-0
    flex-grow: 0
    flex-shrink: 0

@each $size, $width in $grid-breakpoints
  @media all and (min-width: #{$width})
    $n: $grid-columns
    @while $n > 0
      .flex.#{$size}#{$n}
        flex-basis: $n / $grid-columns * 100%
        flex-grow: 0
        max-width: $n / $grid-columns * 100%

      .flex.order-#{$size}#{$n}
        order: $n

      $n: $n - 1

    $m: $grid-columns
    @while $m >= 0
      .flex.offset-#{$size}#{$m}
        // Offsets can only ever work in row layouts
        margin-left: $m / $grid-columns * 100%

      $m: $m - 1

.flex,
.child-flex > *
  flex: 1 1 auto
  max-width: 100%

  &.grow-shrink-0
    flex-grow: 0
    flex-shrink: 0

.spacer
  flex-grow: 1 !important

.grow
  flex-grow: 1 !important
  flex-shrink: 0 !important

.shrink
  flex-grow: 0 !important
  flex-shrink: 1 !important

.fill-height
  height: 100%
